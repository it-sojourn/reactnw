{"ast":null,"code":"import { sendMessageCreator } from \"../../redux/messages-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport React from \"react\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\"; // const DialogsContainer = () => {\n//     return (\n//         <StoreContext.Consumer>\n//             {\n//                 (store) => {\n//                     let state = store.getState().messagePage;\n//                     let onSendMessageClick = () => {\n//                         store.dispatch(sendMessageCreator());\n//                     };\n//                     let onNewMessageChange = (body) => {\n//                         store.dispatch(updateNewMessageBodyCreator(body));\n//                     };\n//                     return (<Dialogs updateNewMessageBody={onNewMessageChange}\n//                                      sendMessage={onSendMessageClick}\n//                                      messagePage={state}/>)\n//                 }\n//             }\n//         </StoreContext.Consumer>\n//     )\n// }\n\nlet mapStateToProps = state => {\n  return {\n    messagePage: state.messagePage,\n    isAuth: state.auth.isAuth\n  };\n};\n\nlet mapDispatchToProps = dispatch => {\n  return {\n    sendMessage: newMessageBody => {\n      dispatch(sendMessageCreator(newMessageBody));\n    }\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);","map":{"version":3,"sources":["C:/projects/reactnw/reactnw/src/components/Dialogs/DialogsContainer.jsx"],"names":["sendMessageCreator","Dialogs","connect","React","withAuthRedirect","compose","mapStateToProps","state","messagePage","isAuth","auth","mapDispatchToProps","dispatch","sendMessage","newMessageBody"],"mappings":"AAAA,SAAQA,kBAAR,QAAiC,8BAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,gBAAR,QAA+B,4BAA/B;AACA,SAAQC,OAAR,QAAsB,OAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACHC,IAAAA,WAAW,EAAED,KAAK,CAACC,WADhB;AAEHC,IAAAA,MAAM,EAAEF,KAAK,CAACG,IAAN,CAAWD;AAFhB,GAAP;AAIH,CALD;;AAMA,IAAIE,kBAAkB,GAAIC,QAAD,IAAc;AACnC,SAAO;AACHC,IAAAA,WAAW,EAAGC,cAAD,IAAoB;AAC7BF,MAAAA,QAAQ,CAACZ,kBAAkB,CAACc,cAAD,CAAnB,CAAR;AAEH;AAJE,GAAP;AAMH,CAPD;;AASA,eAAeT,OAAO,CAClBH,OAAO,CAACI,eAAD,EAAkBK,kBAAlB,CADW,EAElBP,gBAFkB,CAAP,CAGbH,OAHa,CAAf","sourcesContent":["import {sendMessageCreator} from \"../../redux/messages-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n// const DialogsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//                     let state = store.getState().messagePage;\r\n//                     let onSendMessageClick = () => {\r\n//                         store.dispatch(sendMessageCreator());\r\n//                     };\r\n//                     let onNewMessageChange = (body) => {\r\n//                         store.dispatch(updateNewMessageBodyCreator(body));\r\n//                     };\r\n//                     return (<Dialogs updateNewMessageBody={onNewMessageChange}\r\n//                                      sendMessage={onSendMessageClick}\r\n//                                      messagePage={state}/>)\r\n//                 }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messagePage: state.messagePage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"]},"metadata":{},"sourceType":"module"}