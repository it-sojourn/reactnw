{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\projects\\\\reactnw\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\projects\\\\reactnw\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\projects\\\\reactnw\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'nwapp/auth/SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n}); // export const getAuthUserData = () => (dispatch) => {\n//     return authAPI.me()\n//         .then(response => {\n//         if (response.data.resultCode === 0) {\n//             let {email, id, login} = response.data.data;\n//             dispatch(setAuthUserData(id, email, login, true));\n//         }\n//     });\n// }\n\nexport const getAuthUserData = () => /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n    var response, _response$data$data, id, login, email;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return authAPI.me();\n\n        case 2:\n          response = _context.sent;\n\n          if (response.data.resultCode === 0) {\n            _response$data$data = response.data.data, id = _response$data$data.id, login = _response$data$data.login, email = _response$data$data.email;\n            dispatch(setAuthUserData(id, email, login, true));\n          }\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const login = (email, password, rememberMe) => /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n    var response, message;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return authAPI.login(email, password, rememberMe);\n\n        case 2:\n          response = _context2.sent;\n\n          if (response.data.resultCode === 0) {\n            dispatch(getAuthUserData());\n          } else {\n            message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\n            dispatch(stopSubmit('login', {\n              _error: message\n            }));\n          }\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport const logout = () => /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return authAPI.logout();\n\n        case 2:\n          response = _context3.sent;\n\n          if (response.data.resultCode === 0) {\n            dispatch(setAuthUserData(null, null, null, false));\n          }\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n\n  return function (_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport default authReducer;","map":{"version":3,"sources":["C:/projects/reactnw/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","response","data","resultCode","id","password","rememberMe","message","messages","length","_error","logout"],"mappings":"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","sourcesContent":["import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'nwapp/auth/SET_USER_DATA';\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({type: SET_USER_DATA,\r\n    payload: {userId, email, login, isAuth}})\r\n\r\n\r\n// export const getAuthUserData = () => (dispatch) => {\r\n//     return authAPI.me()\r\n//         .then(response => {\r\n//         if (response.data.resultCode === 0) {\r\n//             let {email, id, login} = response.data.data;\r\n//             dispatch(setAuthUserData(id, email, login, true));\r\n//         }\r\n//     });\r\n// }\r\n\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    let response = await authAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData());\r\n        } else {\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n}\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false));\r\n        }\r\n    }\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}