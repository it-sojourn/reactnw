{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\projects\\\\reactnw\\\\reactnw\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\projects\\\\reactnw\\\\reactnw\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\projects\\\\reactnw\\\\reactnw\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { usersAPI } from \"../api/api\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // users: [...state.users],\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return _objectSpread(_objectSpread({}, u), {}, {\n              followed: true\n            });\n          }\n\n          return u;\n        })\n      });\n\n    case UNFOLLOW:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // users: [...state.users],\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return _objectSpread(_objectSpread({}, u), {}, {\n              followed: false\n            });\n          }\n\n          return u;\n        })\n      });\n\n    case SET_USERS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          users: action.users\n        });\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          currentPage: action.currentPage\n        });\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          totalUsersCount: action.totalUsersCount\n        });\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isFetching: action.isFetching\n        });\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const getUsers = (page, pageSize) => {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(toggleIsFetching(true));\n            dispatch(setCurrentPage(page));\n            _context.next = 4;\n            return usersAPI.getUsers(page, pageSize);\n\n          case 4:\n            data = _context.sent;\n            dispatch(toggleIsFetching(false));\n            dispatch(setUsers(data.items));\n            dispatch(setTotalUsersCount(data.totalCount));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nconst followUnfollowFlow = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, userId, apiMethod, actionCreator) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          dispatch(toggleFollowingProgress(true, userId));\n          _context2.next = 3;\n          return apiMethod(userId);\n\n        case 3:\n          response = _context2.sent;\n\n          if (response.data.resultCode === 0) {\n            dispatch(actionCreator(userId));\n          }\n\n          dispatch(toggleFollowingProgress(false, userId));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n\n  return function followUnfollowFlow(_x2, _x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport const follow = userId => {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess); // dispatch(toggleFollowingProgress(true, userId));\n            // let response = await apiMethod(userId);\n            // if (response.data.resultCode === 0) {\n            //     dispatch(actionCreator(userId));\n            // }\n            // dispatch(toggleFollowingProgress(false, userId));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n\n    return function (_x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport const unfollow = userId => {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess); // dispatch(toggleFollowingProgress(true, userId));\n            // let response = await apiMethod(userId);\n            // if (response.data.resultCode === 0) {\n            //     dispatch(actionCreator(userId));\n            // }\n            // dispatch(toggleFollowingProgress(false, userId));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n\n    return function (_x7) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport default usersReducer;","map":{"version":3,"sources":["C:/projects/reactnw/reactnw/src/redux/users-reducer.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","getUsers","page","dispatch","data","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","response","resultCode","follow","bind","unfollow"],"mappings":"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","sourcesContent":["import {usersAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: [...state.users],\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: [...state.users],\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId) => ({type: FOLLOW, userId})\r\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users) => ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, totalUsersCount})\r\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n})\r\n\r\nexport const getUsers = (page, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n\r\n        // dispatch(toggleFollowingProgress(true, userId));\r\n        // let response = await apiMethod(userId);\r\n        // if (response.data.resultCode === 0) {\r\n        //     dispatch(actionCreator(userId));\r\n        // }\r\n        // dispatch(toggleFollowingProgress(false, userId));\r\n    }\r\n}\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n\r\n        // dispatch(toggleFollowingProgress(true, userId));\r\n        // let response = await apiMethod(userId);\r\n        // if (response.data.resultCode === 0) {\r\n        //     dispatch(actionCreator(userId));\r\n        // }\r\n        // dispatch(toggleFollowingProgress(false, userId));\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}